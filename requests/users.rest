### Variables
@baseUrl = http://localhost:3001/api

### ============================================
### AUTHENTICATION (Run this first to get token)
### ============================================

### Login to get token
# @name loginResponse
POST {{baseUrl}}/login
Content-Type: application/json

{
  "username": "admin",
  "password": "admin123"
}

### Extract token from login response
@token = {{loginResponse.response.body.data.token}}
@userId = {{loginResponse.response.body.data.user.id}}

### Alternative: Register new admin (if you don't have an account)
# @name registerResponse
POST {{baseUrl}}/login/register
Content-Type: application/json

{
  "username": "admin",
  "email": "admin@example.com",
  "fullName": "Admin User",
  "password": "admin123"
}

### ============================================
### USERS
### ============================================

### 1. Get All Users (Admin Only)
GET {{baseUrl}}/users
Authorization: Bearer {{token}}

### 2. Get Users with Pagination
GET {{baseUrl}}/users?page=1&per_page=10
Authorization: Bearer {{token}}

### 3. Filter Users by Role (replace with actual Role ID)
GET {{baseUrl}}/users?role=67654a6f8e123456789abcde
Authorization: Bearer {{token}}

### 4. Filter Users by Department (replace with actual Department ID)
GET {{baseUrl}}/users?department=67654a6f8e123456789abcde
Authorization: Bearer {{token}}

### 5. Filter Active Users
GET {{baseUrl}}/users?is_active=true
Authorization: Bearer {{token}}

### 6. Get User by ID
GET {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{token}}

### 7. Create User (Admin Only) - Replace role and department IDs
# @name createUser
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "username": "employee1",
  "email": "employee1@example.com",
  "fullName": "Employee One",
  "password": "employee123",
  "role": "67654a6f8e123456789abcde",
  "department": "67654a6f8e123456789abcdf"
}

### 8. Create User without Department (Optional field)
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "username": "testuser",
  "email": "testuser@example.com",
  "fullName": "Test User",
  "password": "test123",
  "role": "67654a6f8e123456789abcde"
}

### 9. Update User - Self (email and fullName)
PUT {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "newemail@example.com",
  "fullName": "Super Admin"
}

### 10. Update User - Change Password
PUT {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "password": "newpassword123"
}

### 11. Update User - Admin can change role and department (replace IDs)
PUT {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "updated@example.com",
  "fullName": "Updated Name",
  "role": "67654a6f8e123456789abcde",
  "department": "67654a6f8e123456789abcdf"
}

### 12. Update User Role (Admin Only) - Replace with actual Role ID
PATCH {{baseUrl}}/users/{{userId}}/role
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "role": "67654a6f8e123456789abcde"
}

### 13. Update User Department (Admin Only) - Replace with actual Department ID
PATCH {{baseUrl}}/users/{{userId}}/department
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "department": "67654a6f8e123456789abcdf"
}

### 14. Remove User from Department (Admin Only)
PATCH {{baseUrl}}/users/{{userId}}/department
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "department": null
}

### 15. Deactivate User (Admin Only)
PATCH {{baseUrl}}/users/{{userId}}/status
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "isActive": false
}

### 16. Activate User (Admin Only)
PATCH {{baseUrl}}/users/{{userId}}/status
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "isActive": true
}

### 17. Delete User (Admin Only)
DELETE {{baseUrl}}/users/{{userId}}
Authorization: Bearer {{token}}

### ============================================
### ERROR TEST CASES
### ============================================

### 18. Create User - Missing Required Fields (should fail)
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "username": "incomplete"
}

### 19. Create User - Missing Role (should fail - role is now required)
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "username": "norole",
  "email": "norole@example.com",
  "fullName": "No Role User",
  "password": "test123"
}

### 20. Create User - Duplicate Username (should fail)
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "username": "admin",
  "email": "duplicate@example.com",
  "fullName": "Duplicate User",
  "password": "test123",
  "role": "67654a6f8e123456789abcde"
}

### 21. Create User - Invalid Role ID (should fail)
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "username": "invalidrole",
  "email": "invalidrole@example.com",
  "fullName": "Invalid Role User",
  "password": "test123",
  "role": "invalid-role-id"
}

### 22. Create User - Invalid Department ID (should fail)
POST {{baseUrl}}/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "username": "invaliddept",
  "email": "invaliddept@example.com",
  "fullName": "Invalid Dept User",
  "password": "test123",
  "role": "67654a6f8e123456789abcde",
  "department": "invalid-dept-id"
}

### 23. Update Role with Invalid ID (should fail)
PATCH {{baseUrl}}/users/{{userId}}/role
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "role": "invalid-role-id"
}

### 24. Update Department with Invalid ID (should fail)
PATCH {{baseUrl}}/users/{{userId}}/department
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "department": "invalid-dept-id"
}

### ============================================
### NOTES
### ============================================
# Important: Role is now REQUIRED when creating users
# Role and Department must be valid ObjectId references
# Replace placeholder IDs (67654a6f8e123456789abcde) with actual IDs from your database
# To get actual IDs:
#   1. First create roles using roles.rest
#   2. Then create departments using departments.rest
#   3. Use the returned IDs in user creation
# Department is optional but if provided must be valid
# Only Admin can update user's role and department
# Users can update their own email, fullName, and password
